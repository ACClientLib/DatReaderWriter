<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(SolutionDir)\ext\DatReaderWriter\DatReaderWriter.SourceGen\bin\Debug\netstandard2.0\System.CodeDom.dll" #>
<#@ assembly name="$(SolutionDir)\ext\DatReaderWriter\DatReaderWriter.SourceGen\bin\Debug\netstandard2.0\DatReaderWriter.SourceGen.dll" #>
<#@ template language="c#" hostspecific="true" inherits="DatReaderWriter.SourceGen.CSTemplateBase" #>
<#@ output extension=".cs" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#
    var manager = Manager.Create(Host, GenerationEnvironment);
    
    SetupMessageParser(this.Host.ResolvePath("../dats.xml"));
    
    foreach (var kv in this.XMLDefParser.ACEnums) { 
        manager.StartNewFile($"../Generated/Enums/{kv.Key}.generated.cs"); 
        PrintLocalModificationWarning();
        WriteLine("using System;");
        WriteLine("namespace ACClientLib.DatReaderWriter.Enums {");
        using (new IndentHelper(this)) {
            WriteSummary(kv.Value.Text);

            if (kv.Value.IsMask)
                WriteLine("[Flags]");
        
            WriteLine("public enum " + kv.Key + " : " + kv.Value.ParentType + " {");
        
            using (new IndentHelper(this)) {
                foreach (var enumValue in kv.Value.Values) {
                    WriteSummary(enumValue.Text);
                    WriteLine(enumValue.Name + " = " + enumValue.Value + ",\n");
                }
            }
        
            WriteLine("};"); // end enum definitinion
        }
        WriteLine("}");
        manager.EndBlock();
    }
    
    manager.Process(true);
#>
