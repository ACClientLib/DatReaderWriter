<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(ProjectDir)\..\DatReaderWriter.SourceGen\bin\netstandard2.0\System.CodeDom.dll" #>
<#@ assembly name="$(ProjectDir)\..\DatReaderWriter.SourceGen\bin\netstandard2.0\DatReaderWriter.SourceGen.dll" #>
<#@ template language="c#" hostspecific="true" inherits="DatReaderWriter.SourceGen.CSTemplateBase" #>
<#@ output extension=".cs" #>
<#@include file="MultipleOutputHelper.ttinclude"#>
<#
    var manager = Manager.Create(Host, GenerationEnvironment);
    var readers = new List<string>() { "Portal", "Cell" };
    
    SetupMessageParser(this.Host.ResolvePath("../dats.xml"));
    foreach (var reader in readers) {
        manager.StartNewFile($"../Generated/{reader}Database.generated.cs");

        PrintLocalModificationWarning();
        WriteLine("using System.Numerics;");
        WriteLine("using System.IO;");
        WriteLine("using System.Linq;");
        WriteLine("using System.Collections.Generic;"); 
        WriteLine("using ACClientLib.DatReaderWriter.Enums;");
        WriteLine("using ACClientLib.DatReaderWriter.IO;");
        WriteLine("using ACClientLib.DatReaderWriter.Types;");
        WriteLine("using ACClientLib.DatReaderWriter.Attributes;");
        WriteLine("using ACClientLib.DatReaderWriter.Lib;");
        WriteLine("using ACClientLib.DatReaderWriter.DBObjs;");
        WriteLine("");
        WriteLine("namespace ACClientLib.DatReaderWriter {");
    
        using (new IndentHelper(this)) {
            WriteLine($"public partial class {reader}Database {{");

            var dbObjs = new List<DatReaderWriter.SourceGen.Models.ACDBObj>();
            foreach (var kv in this.XMLDefParser.ACDBObjs) {
                var dataType = kv.Value;
                if (dataType.Children.Count == 0 || (dataType.Parent as DatReaderWriter.SourceGen.Models.ACDat).Name != reader.ToLower()) continue;
                dbObjs.Add(dataType);
            }

            using (new IndentHelper(this)) {
                foreach (var dataType in dbObjs) {
                    if (dataType.FirstId != 0 && dataType.FirstId == dataType.LastId) {
                        //WriteLine($"private {dataType.Name}>? _{dataType.Name}s;");
                    }
                    else {
                        WriteLine($"private DBObjCollection<{dataType.Name}>? _{dataType.Name}s;");
                    }
                }
            
                WriteLine("");
            
                foreach (var dataType in dbObjs) {
                    if (dataType.FirstId != 0 && dataType.FirstId == dataType.LastId) {
                        WriteSummary("The " + dataType.Name + " DBObj in the database.");
                        WriteLine($"public {dataType.Name}? {dataType.Name} {{");
                        using (new  IndentHelper(this)) {
                            WriteLine("get {");
                            using (new  IndentHelper(this)) {
                                WriteLine($"TryReadFile<{dataType.Name}>(0x{dataType.FirstId:X8}u, out var dbObj);");
                                WriteLine("return dbObj;");
                            }
                            WriteLine("}");
                        }
                        WriteLine("}");
                    }
                    else {
                        WriteSummary("All " + dataType.Name + "s in the database.");
                        WriteLine($"public DBObjCollection<{dataType.Name}> {dataType.Name}s => _{dataType.Name}s ??= new DBObjCollection<{dataType.Name}>(this);");
                        WriteLine("");
                    }
                }
            }

            WriteLine("}"); // close Database class
        }
    
        WriteLine("}"); // close namespace
        manager.EndBlock();
    }

    manager.Process(true);
#>
